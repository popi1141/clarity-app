{"version":3,"sources":["../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/realtime/Constants.ts","../../src/core/RepoInfo.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/api/DataSnapshot.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/api/Query.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/core/util/ServerValues.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/operation/Operation.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/util/ImmutableTree.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/view/View.ts","../../src/core/SyncPoint.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/SyncTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/core/Repo.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/core/util/Tree.ts","../../src/api/Reference.ts","../../src/core/AuthTokenProvider.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts","../node_modules/webpack/buildin/harmony-module.js"],"names":["domStorage_","prefix_","set","key","value","this","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","toString","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","DOMStorageWrapper","e","MemoryStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","message","i","varArgs","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","pathString","newEmptyPath","Path","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","String","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","errorPrefix_","parts_","byteLength_","max","checkValid_","child","pop","last","ValidationPath","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","domain","indexOf","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","type","params","connURL","pairs","toURLString","protocol","query","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","location","scheme","repoInfo","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","repo_","cancel","onComplete","arguments","deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","toJSON","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","successor","keyAsInt","next","source","sourcePlusOne","predecessor","repeat","node","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","val","isDefinedOn","maxPost","makePost","indexValue","Index","KEY_INDEX","KeyIndex","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","isEmpty","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Object","defineProperties","MAX","setPriorityMaxNode","json","childData","childSet","sortedChildSet","setNodeFromJSON","VALUE_INDEX","valueNode","indexPath_","extractChild","snap","aChild","bChild","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","DataSnapshot","forEach","childrenNode","hasChildren","getKey","getRef","eventRegistration","prevName","getPath","ref","getParent","getEventType","getEventRunner","callback_","cancelCallback_","context_","respondsTo","createEvent","change","getQueryParams","getIndex","DataEvent","snapshotNode","eventData","ctx","call","createCancelEvent","CancelEvent","matches","ValueEventRegistration","hasAnyCallback","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","every","changeValue","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","__referenceConstructor","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","indexedFilter_","IndexedFilter","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","loadsAllData","isDefault","QueryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","orderBy","qs","PathIndex","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit_","validateNoPreviousOrderByCall_","Query","on","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","off","valueCallback","removeEventCallbackForQuery","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","resolve","err","reject","limitToFirst","limit","limitToLast","orderByChild","parsedPath","orderByKey","orderByPriority","orderByValue","startAt","startAfter","endAt","endBefore","equalTo","queryObject","viewFrom","queryParamsGetQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","existing","unused","delta","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","OperationType","children","Map","find","size","has","remember","clear","SparseSnapshotTree","forget","tree","delete","forEachTree","prefixPath","func","newOperationSourceServerTaggedQuery","queryId","fromUser","fromServer","tagged","emptyChildrenSingleton","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","AckUserWrite","fromObject","ImmutableTree","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","ViewCache","CacheNode","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","changeMap","oldChange","oldType","getChanges","from","values","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","viewCache","changes","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","ViewProcessor","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","WriteTreeCompleteChildSource","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","completeServerCache","serverChildren","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","registrations","eventCache","filteredChanges","filter","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","initialViewCache","eventRegistrations_","indexFilter","LimitedFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","getQuery","getCompleteNode","getCompleteServerCache","cache","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","concat","generateEventsForChanges_","getInitialEvents","initialChanges","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","views","optCompleteServerCache","view","getView","serverCacheComplete","eventCacheComplete","View","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","SyncPoint","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","writeTree_","empty","CompoundWrite","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","removeWrite","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","WriteTree","layerTree_","write","subMerge","completeServerChildren","topLevelSet","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","deepNode","treePath_","existingServerCache","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","tag","queryKey","queryKeyForTag_","r","SyncTree","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","getServerValue","serverCacheNode","maybeChildSyncPoint","childMap","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","map","childQueries","queryToStop","status","code","reason","toUpperCase","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","rootNode_","updateSnapshot","newSnapshotNode","counters_","incrementCounter","amount","getCollection","hashString","collections_","StatsCollection","getOrCreateReporter","creatorFunction","reporters_","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","allowedEvents_","listeners_","trigger","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","StatsManager","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","readyState","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WebSocketImpl","MozWebSocket","WebSocket","TransactionStatus","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","request","p","q","outstandingGet","sendGet_","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","authMethod","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","forceRefresh","getToken","then","accessToken","Connection","interrupt","resume","serverTimeOffset","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","clientName","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","restRequest_","authTokenData","authToken","xhr","XMLHttpRequest","responseText","childCount","name_","parent_","TreeNode","subTree","pathObj","Tree","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","parent","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","INTERRUPT_REASON","forceRestClient_","app","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","search","authOverride","appId","addTokenChangeListener","statsReporter_","StatsReporter","infoData_","SnapshotHolder","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","raw","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","cached","Promise","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","statsIncrementCounter","metric","__database","Database","startTransaction","transactionUpdate","applyLocally","watchRef","Reference","transaction","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","abortTransactionsOnNode_","lastSent","Repo","parentPath","getRoot","databaseProp","database","promiseComplete","TransactionResult","setPriority","thennablePushRef","pushRef","OnDisconnect","_staticInstance","app_","authProvider_","auth_","getImmediate","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","repos_","useRestClient_","RepoManager","appName","dbUrl","applyEmulatorSettings","databaseFromApp","authProvider","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","FirebaseAuthTokenProvider","createRepo","deleteRepo","appRepos","forceRestClient","repoInternal_","instanceStarted_","INTERNAL","checkDeleted_","rootInternal_","useEmulator","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","customAuthImpl","setComponent","instance","DataConnection","prototype","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","registerDatabase","originalModule","webpackPolyfill","create","defineProperty","enumerable","l"],"mappings":"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","file":"static/js/6.d8a15bfb.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key The key to save the value under\n   * @param value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @return The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ A flag to turn on logging, or a custom logger\n * @param persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str The string\n * @param segsize The maximum number of chars in the string.\n * @return The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback Callback function.\n * @param context Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback Optional onComplete callback.\n * @param varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn Function to run.\n * @param time Milliseconds to wait before running.\n * @return The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @return The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @return True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @return The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @return -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @return true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @return True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  private parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param path Initial Path.\n   * @param errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param type of connection\n   * @param params list\n   * @return The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @return key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath\n} from './Path';\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\nimport { each, isInvalidJSONNumber } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\nexport class OnDisconnect {\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode New priority to set for the node.\n   * @return Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName The name of the child to retrieve.\n   * @return The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path The path of the child to retrieve.\n   * @return The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName The name of the child to find the predecessor of.\n   * @param childNode The node to find the predecessor of.\n   * @param index The index to use to determine the predecessor\n   * @return The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName The name of the child to update.\n   * @param newChildNode The new child node\n   * @return The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path The path of the child to update.\n   * @param newChildNode The new child node, which may be an empty node\n   * @return The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other Another node\n   * @return -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @return Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @return This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @return True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ List of children of this node..\n   * @param priorityNode_ The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node Node to iterate.\n   * @param isReverse_ Whether or not to iterate in reverse\n   * @param resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key Key associated with this node.\n   * @param value Value associated with this node.\n   * @param color Whether this node is red.\n   * @param left Left child.\n   * @param right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key New key for the node, or null.\n   * @param value New value for the node, or null.\n   * @param color New color for the node, or null.\n   * @param left New left child for the node, or null.\n   * @param right New right child for the node, or null.\n   * @return The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key Key to insert.\n   * @param value Value to insert.\n   * @param comparator Comparator.\n   * @return New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @return New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key The key of the item to remove.\n   * @param comparator Comparator.\n   * @return New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @return Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @return New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @return New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @return Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @return True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key Key to be added.\n   * @param value Value to be added.\n   * @param comparator Comparator.\n   * @return New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key The key to remove.\n   * @param comparator Comparator.\n   * @return New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @return Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ Key comparator.\n   * @param root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key Key to be added.\n   * @param value Value to be added.\n   * @return New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key The key to remove.\n   * @return New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key The key to look up.\n   * @return The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key The key to find the predecessor of\n   * @return The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @return The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList Unsorted list of children\n * @param cmp The comparison method to be used\n * @param keyFn An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json JSON to create a node for.\n * @param priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param node_ A SnapshotNode to wrap.\n   * @param ref_ The ref of the location this snapshot came from.\n   * @param index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param childPathString Path to a child.\n   * @return DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param childPathString Path to a child.\n   * @return Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action Callback function to be called\n   * for each child.\n   * @return True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration The function to call to with the event data. User provided\n   * @param snapshot The data backing the event\n   * @param prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type The event type */\n  type: ChangeType;\n  /** @param snapshotNode The data */\n  snapshotNode: Node;\n  /** @param childName The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MAX_NAME, MIN_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport {\n  Path,\n  pathEquals,\n  pathIsEmpty,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validateFirebaseDataArg,\n  validateKey,\n  validatePathString\n} from '../core/util/validation';\n\nimport {\n  ChildEventRegistration,\n  EventRegistration,\n  ValueEventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport {\n  QueryParams,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsStartAfter,\n  queryParamsStartAt,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsOrderBy\n} from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n        'endAt(), endBefore(), or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n            '(null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n            'equalTo() cannot be an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n          'limitToFirst() or limitToLast() instead.'\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return this.repo.getValue(this);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      queryParamsLimitToFirst(this.queryParams_, limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      queryParamsLimitToLast(this.queryParams_, limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(this.queryParams_, index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = queryParamsOrderBy(this.queryParams_, KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = queryParamsOrderBy(this.queryParams_, PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = queryParamsOrderBy(this.queryParams_, VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = queryParamsStartAt(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);\n    validateKey('Query.startAfter', 2, name, true);\n\n    const newParams = queryParamsStartAfter(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' +\n          'or equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = queryParamsEndAt(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);\n    validateKey('Query.endBefore', 2, name, true);\n\n    const newParams = queryParamsEndBefore(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + pathToUrlEncodedString(this.path);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  queryObject(): object {\n    return queryParamsGetQueryObject(this.queryParams_);\n  }\n\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = pathEquals(this.path, other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_ = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @return True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @return query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path, pathChild } from './Path';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path path to which write is relative\n * @param node new data written at path\n * @param syncTree current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!pathIsEmpty(path) && this.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (pathIsEmpty(path)) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = pathGetFront(path);\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = pathPopFront(path);\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = pathGetFront(path);\n        path = pathPopFront(path);\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath The remainder of the path\n   * @param predicate The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @return The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath Path to set value at.\n   * @param toSet Value to set.\n   * @return Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath Path to value to remove.\n   * @return Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath Path to get value for.\n   * @return Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath Path to replace subtree for.\n   * @param newTree New tree.\n   * @return Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\nimport { Node } from '../snap/Node';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport class ViewCache {\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change, changeValue } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\nexport class ProcessorResult {\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n */\nexport class ViewProcessor {\n  constructor(private readonly filter_: NodeFilter) {}\n\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !pathIsEmpty(overwrite.path));\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(changeValue(newViewCache.getCompleteEventSnap()));\n      }\n    }\n  }\n\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (pathIsEmpty(changePath)) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n          assert(\n            pathGetLength(changePath) === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = pathPopFront(changePath);\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        pathGetLength(changePath) > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = pathPopFront(changePath);\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (pathIsEmpty(changePath)) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (pathIsEmpty(childChangePath)) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              pathGetBack(childChangePath) === '.priority' &&\n              childNode.getChild(pathParent(childChangePath)).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = pathChild(path, relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, pathGetFront(writePath))) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = pathChild(path, relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, pathGetFront(writePath))) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = new ImmutableTree<Node>(null).setTree(\n        path,\n        changedChildren\n      );\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (pathIsEmpty(ackPath)) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = new ImmutableTree<Node>(null);\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = pathChild(ackPath, mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = pathGetFront(path);\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            pathPopFront(path),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            pathPopFront(path),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(newEmptyPath()) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: Query) {\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\nimport { queryParamsGetNodeFilter } from './QueryParams';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  getCompleteNode(): Node | null {\n    return this.viewCache_.getCompleteEventSnap();\n  }\n\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!pathIsEmpty(path) &&\n          !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param eventRegistration If null, remove all callbacks.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(changeChildAdded(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(\n      this.eventGenerator_,\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n  \n  /**\n   * Get a view for the specified query.\n   *\n   * @param query The query to return a view for\n   * @param writesCache\n   * @param serverCache\n   * @param serverCacheComplete\n   * @return Events to raise.\n   */\n  getView(\n    query: Query,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): View {\n    const queryId = query.queryIdentifier();\n    const view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(eventCache, eventCacheComplete, false),\n        new CacheNode(serverCache, serverCacheComplete, false)\n      );\n      return new View(query, viewCache);\n    }\n    return view;\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param query\n   * @param eventRegistration\n   * @param writesCache\n   * @param serverCache Complete server cache, if we have it.\n   * @param serverCacheComplete\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const view = this.getView(\n      query,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!this.views.has(query.queryIdentifier())) {\n      this.views.set(query.queryIdentifier(), view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param eventRegistration If null, remove all callbacks.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { NamedNode, Node } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite The CompoundWrite to remove.\n * @param path The path at which a write and all deeper writes should be removed\n * @return The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite The CompoundWrite to check.\n * @param path The path to check for\n * @return Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite The CompoundWrite to get the node from.\n * @param path The path to get a complete write\n * @return The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite The CompoundWrite to get children from.\n * @return A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @return Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node The node to apply this CompoundWrite to\n * @return The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.empty();\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = compoundWriteAddWrite(\n        this.visibleWrites_,\n        path,\n        snap\n      );\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = compoundWriteAddWrites(\n      this.visibleWrites_,\n      path,\n      changedChildren\n    );\n    this.lastWriteId_ = writeId;\n  }\n\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @return true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = compoundWriteRemoveWrite(\n          this.visibleWrites_,\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = compoundWriteRemoveWrite(\n            this.visibleWrites_,\n            pathChild(writeToRemove.path, childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return compoundWriteGetCompleteNode(this.visibleWrites_, path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param writeIdsToExclude An optional set to be excluded\n   * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = compoundWriteGetCompleteNode(\n        this.visibleWrites_,\n        treePath\n      );\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = compoundWriteChildCompoundWrite(\n          this.visibleWrites_,\n          treePath\n        );\n        if (compoundWriteIsEmpty(subMerge)) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return compoundWriteApply(subMerge, layeredCache);\n        }\n      }\n    } else {\n      const merge = compoundWriteChildCompoundWrite(\n        this.visibleWrites_,\n        treePath\n      );\n      if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (pathContains(write.path, treePath) ||\n                pathContains(treePath, write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return compoundWriteApply(mergeAtPath, layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = compoundWriteGetCompleteNode(\n      this.visibleWrites_,\n      treePath\n    );\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = compoundWriteChildCompoundWrite(\n        this.visibleWrites_,\n        treePath\n      );\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = compoundWriteApply(\n            compoundWriteChildCompoundWrite(merge, new Path(childName)),\n            childNode\n          );\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = compoundWriteChildCompoundWrite(\n        this.visibleWrites_,\n        treePath\n      );\n      compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(this.visibleWrites_, path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = compoundWriteChildCompoundWrite(\n        this.visibleWrites_,\n        path\n      );\n      if (compoundWriteIsEmpty(childMerge)) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return compoundWriteApply(\n          childMerge,\n          existingServerSnap.getChild(childPath)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(\n      this.visibleWrites_,\n      path\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = compoundWriteChildCompoundWrite(\n          this.visibleWrites_,\n          path\n        );\n        return compoundWriteApply(\n          childMerge,\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return compoundWriteGetCompleteNode(this.visibleWrites_, path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = compoundWriteChildCompoundWrite(\n      this.visibleWrites_,\n      treePath\n    );\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = compoundWriteApply(merge, completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return pathContains(writeRecord.path, path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          pathContains(pathChild(writeRecord.path, childName), path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      newEmptyPath()\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath: Path;\n        if (write.snap) {\n          if (pathContains(treeRoot, writePath)) {\n            relativePath = newRelativePath(treeRoot, writePath);\n            compoundWrite = compoundWriteAddWrite(\n              compoundWrite,\n              relativePath,\n              write.snap\n            );\n          } else if (pathContains(writePath, treeRoot)) {\n            relativePath = newRelativePath(writePath, treeRoot);\n            compoundWrite = compoundWriteAddWrite(\n              compoundWrite,\n              newEmptyPath(),\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (pathContains(treeRoot, writePath)) {\n            relativePath = newRelativePath(treeRoot, writePath);\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              relativePath,\n              write.children\n            );\n          } else if (pathContains(writePath, treeRoot)) {\n            relativePath = newRelativePath(writePath, treeRoot);\n            if (pathIsEmpty(relativePath)) {\n              compoundWrite = compoundWriteAddWrites(\n                compoundWrite,\n                newEmptyPath(),\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, pathGetFront(relativePath));\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(pathPopFront(relativePath));\n                compoundWrite = compoundWriteAddWrite(\n                  compoundWrite,\n                  newEmptyPath(),\n                  deepNode\n                );\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  private readonly writeTree_: WriteTree;\n\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param writeIdsToExclude Optional writes to exclude.\n   * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   *\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(pathChild(this.treePath_, path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(\n      pathChild(this.treePath_, childName),\n      this.writeTree_\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { each, errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(\n    null\n  );\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(newOperationSourceUser(), path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(newOperationSourceUser(), path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = new ImmutableTree<boolean>(null);\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(newEmptyPath(), true);\n      } else {\n        each(write.children, (pathString: string) => {\n          affectedTree = affectedTree.set(new Path(pathString), true);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(newOperationSourceServer(), path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(newOperationSourceServer(), path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(newOperationSourceServer(), path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = newRelativePath(queryPath, path);\n      const op = new Overwrite(\n        newOperationSourceServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = newRelativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        newOperationSourceServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = newRelativePath(queryPath, path);\n      const op = new ListenComplete(\n        newOperationSourceServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = newRelativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache =\n        serverCache || syncPoint.getCompleteServerCache(newEmptyPath());\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(\n          newEmptyPath()\n        );\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  getServerValue(query: Query): Node | null {\n    const path = query.path;\n    let serverCache: Node | null = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = newRelativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      serverCache =\n        serverCache || syncPoint.getCompleteServerCache(newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode: CacheNode | null = serverCacheComplete\n      ? new CacheNode(serverCache, true, false)\n      : null;\n    const writesCache: WriteTreeRef | null = this.pendingWriteTree_.childWrites(\n      query.path\n    );\n    const view: View = syncPoint.getView(\n      query,\n      writesCache,\n      serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n      serverCacheComplete\n    );\n    return view.getCompleteNode();\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !pathIsEmpty(relativePath) &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(newEmptyPath())\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (pathIsEmpty(operation.path)) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(newEmptyPath());\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(newEmptyPath());\n      }\n\n      let events: Event[] = [];\n      const childName = pathGetFront(operation.path);\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path The path to raise events for.\n * @param eventDataList The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath The path to raise events for.\n * @param eventDataList The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { assert, jsonEval, stringify, isNodeSdk } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo The info for the websocket endpoint.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   * @return connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @return Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { Indexable } from './util/misc';\nimport { Tree } from './util/Tree';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Reference } from '../api/Reference';\nimport { FirebaseAppLike } from './RepoManager';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private infoData_: SnapshotHolder;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  private transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    private forceRestClient_: boolean,\n    public app: FirebaseAppLike,\n    public authTokenProvider_: AuthTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  start(): void {\n    this.stats_ = StatsManager.getCollection(this.repoInfo_);\n\n    if (this.forceRestClient_ || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.authTokenProvider_\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = this.app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        this.authTokenProvider_,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    this.authTokenProvider_.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      this.repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          eventQueueRaiseEventsForChangedPath(\n            this.eventQueue_,\n            query.path,\n            events\n          );\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    eventQueueRaiseEventsForChangedPath(this.eventQueue_, affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    eventQueueRaiseEventsForChangedPath(this.eventQueue_, path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  /**\n   * The purpose of `getValue` is to return the latest known value\n   * satisfying `query`.\n   *\n   * This method will first check for in-memory cached values\n   * belonging to active listeners. If they are found, such values\n   * are considered to be the most up-to-date.\n   *\n   * If the client is not connected, this method will try to\n   * establish a connection and request the value for `query`. If\n   * the client is not able to retrieve the query result, it reports\n   * an error.\n   *\n   * @param query - The query to surface a value for.\n   */\n  getValue(query: Query): Promise<DataSnapshot> {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = this.serverSyncTree_.getServerValue(query);\n    if (cached != null) {\n      return Promise.resolve(\n        new DataSnapshot(\n          cached,\n          query.getRef(),\n          query.getQueryParams().getIndex()\n        )\n      );\n    }\n    return this.server_.get(query).then(\n      payload => {\n        const node = nodeFromJSON(payload as string);\n        const events = this.serverSyncTree_.applyServerOverwrite(\n          query.path,\n          node\n        );\n        eventQueueRaiseEventsAtPath(this.eventQueue_, query.path, events);\n        return Promise.resolve(\n          new DataSnapshot(\n            node,\n            query.getRef(),\n            query.getQueryParams().getIndex()\n          )\n        );\n      },\n      err => {\n        this.log_('get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err as string));\n      }\n    );\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    eventQueueQueueEvents(this.eventQueue_, events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        eventQueueRaiseEventsForChangedPath(\n          this.eventQueue_,\n          path,\n          clearEvents\n        );\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(this.eventQueue_, affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        pathChild(path, changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      eventQueueQueueEvents(this.eventQueue_, events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          eventQueueRaiseEventsForChangedPath(\n            this.eventQueue_,\n            affectedPath,\n            clearEvents\n          );\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(\n          pathChild(path, changedPath)\n        );\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      eventQueueRaiseEventsForChangedPath(this.eventQueue_, path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(newEmptyPath(), (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(newEmptyPath(), (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(\n      this.eventQueue_,\n      newEmptyPath(),\n      events\n    );\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(\n              pathChild(path, childName),\n              newChildNode\n            );\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (pathGetFront(query.path) === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    eventQueueRaiseEventsAtPath(this.eventQueue_, query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query.path) === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    eventQueueRaiseEventsAtPath(this.eventQueue_, query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n\n  /**\n   * Creates a new transaction, adds it to the transactions we're tracking, and\n   * sends it to the server if possible.\n   *\n   * @param path Path at which to do transaction.\n   * @param transactionUpdate Update callback.\n   * @param onComplete Completion callback.\n   * @param applyLocally Whether or not to make intermediate results visible\n   */\n  startTransaction(\n    path: Path,\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n    applyLocally: boolean\n  ) {\n    this.log_('transaction on ' + path);\n\n    // Add a watch to make sure we get server updates.\n    const valueCallback = function () {};\n    const watchRef = new Reference(this, path);\n    watchRef.on('value', valueCallback);\n    const unwatcher = function () {\n      watchRef.off('value', valueCallback);\n    };\n\n    // Initialize transaction.\n    const transaction: Transaction = {\n      path,\n      update: transactionUpdate,\n      onComplete,\n      // One of TransactionStatus enums.\n      status: null,\n      // Used when combining transactions at different locations to figure out\n      // which one goes first.\n      order: LUIDGenerator(),\n      // Whether to raise local events for this transaction.\n      applyLocally,\n      // Count of how many times we've retried the transaction.\n      retryCount: 0,\n      // Function to call to clean up our .on() listener.\n      unwatcher,\n      // Stores why a transaction was aborted.\n      abortReason: null,\n      currentWriteId: null,\n      currentInputSnapshot: null,\n      currentOutputSnapshotRaw: null,\n      currentOutputSnapshotResolved: null\n    };\n\n    // Run transaction initially.\n    const currentState = this.getLatestState_(path);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n      // Abort transaction.\n      transaction.unwatcher();\n      transaction.currentOutputSnapshotRaw = null;\n      transaction.currentOutputSnapshotResolved = null;\n      if (transaction.onComplete) {\n        // We just set the input snapshot, so this cast should be safe\n        const snapshot = new DataSnapshot(\n          transaction.currentInputSnapshot,\n          new Reference(this, transaction.path),\n          PRIORITY_INDEX\n        );\n        transaction.onComplete(null, false, snapshot);\n      }\n    } else {\n      validateFirebaseData(\n        'transaction failed: Data returned ',\n        newVal,\n        transaction.path\n      );\n\n      // Mark as run and add to our queue.\n      transaction.status = TransactionStatus.RUN;\n      const queueNode = this.transactionQueueTree_.subTree(path);\n      const nodeQueue = queueNode.getValue() || [];\n      nodeQueue.push(transaction);\n\n      queueNode.setValue(nodeQueue);\n\n      // Update visibleData and raise events\n      // Note: We intentionally raise events after updating all of our\n      // transaction state, since the user could start new transactions from the\n      // event callbacks.\n      let priorityForNode;\n      if (\n        typeof newVal === 'object' &&\n        newVal !== null &&\n        contains(newVal, '.priority')\n      ) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        priorityForNode = safeGet(newVal as any, '.priority');\n        assert(\n          isValidPriority(priorityForNode),\n          'Invalid priority returned by transaction. ' +\n            'Priority must be a valid string, finite number, server value, or null.'\n        );\n      } else {\n        const currentNode =\n          this.serverSyncTree_.calcCompleteEventCache(path) ||\n          ChildrenNode.EMPTY_NODE;\n        priorityForNode = currentNode.getPriority().val();\n      }\n\n      const serverValues = this.generateServerValues();\n      const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n      const newNode = resolveDeferredValueSnapshot(\n        newNodeUnresolved,\n        currentState,\n        serverValues\n      );\n      transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n      transaction.currentOutputSnapshotResolved = newNode;\n      transaction.currentWriteId = this.getNextWriteId_();\n\n      const events = this.serverSyncTree_.applyUserOverwrite(\n        path,\n        newNode,\n        transaction.currentWriteId,\n        transaction.applyLocally\n      );\n      eventQueueRaiseEventsForChangedPath(this.eventQueue_, path, events);\n\n      this.sendReadyTransactions_();\n    }\n  }\n\n  /**\n   * @param excludeSets A specific set to exclude\n   */\n  private getLatestState_(path: Path, excludeSets?: number[]): Node {\n    return (\n      this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n      ChildrenNode.EMPTY_NODE\n    );\n  }\n\n  /**\n   * Sends any already-run transactions that aren't waiting for outstanding\n   * transactions to complete.\n   *\n   * Externally it's called with no arguments, but it calls itself recursively\n   * with a particular transactionQueueTree node to recurse through the tree.\n   *\n   * @param node transactionQueueTree node to start at.\n   */\n  private sendReadyTransactions_(\n    node: Tree<Transaction[]> = this.transactionQueueTree_\n  ) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n      this.pruneCompletedTransactionsBelowNode_(node);\n    }\n\n    if (node.getValue() !== null) {\n      const queue = this.buildTransactionQueue_(node);\n      assert(queue.length > 0, 'Sending zero length transaction queue');\n\n      const allRun = queue.every(\n        (transaction: Transaction) =>\n          transaction.status === TransactionStatus.RUN\n      );\n\n      // If they're all run (and not sent), we can send them.  Else, we must wait.\n      if (allRun) {\n        this.sendTransactionQueue_(node.path(), queue);\n      }\n    } else if (node.hasChildren()) {\n      node.forEachChild(childNode => {\n        this.sendReadyTransactions_(childNode);\n      });\n    }\n  }\n\n  /**\n   * Given a list of run transactions, send them to the server and then handle\n   * the result (success or failure).\n   *\n   * @param path The location of the queue.\n   * @param queue Queue of transactions under the specified location.\n   */\n  private sendTransactionQueue_(path: Path, queue: Transaction[]) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n      return txn.currentWriteId;\n    });\n    const latestState = this.getLatestState_(path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n      const txn = queue[i];\n      assert(\n        txn.status === TransactionStatus.RUN,\n        'tryToSendTransactionQueue_: items in queue should all be run.'\n      );\n      txn.status = TransactionStatus.SENT;\n      txn.retryCount++;\n      const relativePath = newRelativePath(path, txn.path);\n      // If we've gotten to this point, the output snapshot must be defined.\n      snapToSend = snapToSend.updateChild(\n        relativePath /** @type {!Node} */,\n        txn.currentOutputSnapshotRaw\n      );\n    }\n\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n\n    // Send the put.\n    this.server_.put(\n      pathToSend.toString(),\n      dataToSend,\n      (status: string) => {\n        this.log_('transaction put response', {\n          path: pathToSend.toString(),\n          status\n        });\n\n        let events: Event[] = [];\n        if (status === 'ok') {\n          // Queue up the callbacks and fire them after cleaning up all of our\n          // transaction state, since the callback could trigger more\n          // transactions or sets.\n          const callbacks = [];\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.COMPLETED;\n            events = events.concat(\n              this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n            );\n            if (queue[i].onComplete) {\n              // We never unset the output snapshot, and given that this\n              // transaction is complete, it should be set\n              const node = queue[i].currentOutputSnapshotResolved as Node;\n              const ref = new Reference(this, queue[i].path);\n              const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n              callbacks.push(\n                queue[i].onComplete.bind(null, null, true, snapshot)\n              );\n            }\n            queue[i].unwatcher();\n          }\n\n          // Now remove the completed transactions.\n          this.pruneCompletedTransactionsBelowNode_(\n            this.transactionQueueTree_.subTree(path)\n          );\n          // There may be pending transactions that we can now send.\n          this.sendReadyTransactions_();\n\n          eventQueueRaiseEventsForChangedPath(this.eventQueue_, path, events);\n\n          // Finally, trigger onComplete callbacks.\n          for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n          }\n        } else {\n          // transactions are no longer sent.  Update their status appropriately.\n          if (status === 'datastale') {\n            for (let i = 0; i < queue.length; i++) {\n              if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n                queue[i].status = TransactionStatus.NEEDS_ABORT;\n              } else {\n                queue[i].status = TransactionStatus.RUN;\n              }\n            }\n          } else {\n            warn(\n              'transaction at ' + pathToSend.toString() + ' failed: ' + status\n            );\n            for (let i = 0; i < queue.length; i++) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n              queue[i].abortReason = status;\n            }\n          }\n\n          this.rerunTransactions_(path);\n        }\n      },\n      latestHash\n    );\n  }\n\n  /**\n   * Finds all transactions dependent on the data at changedPath and reruns them.\n   *\n   * Should be called any time cached data changes.\n   *\n   * Return the highest path that was affected by rerunning transactions. This\n   * is the path at which events need to be raised for.\n   *\n   * @param changedPath The path in mergedData that changed.\n   * @return The rootmost path that was affected by rerunning transactions.\n   */\n  private rerunTransactions_(changedPath: Path): Path {\n    const rootMostTransactionNode = this.getAncestorTransactionNode_(\n      changedPath\n    );\n    const path = rootMostTransactionNode.path();\n\n    const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n    this.rerunTransactionQueue_(queue, path);\n\n    return path;\n  }\n\n  /**\n   * Does all the work of rerunning transactions (as well as cleans up aborted\n   * transactions and whatnot).\n   *\n   * @param queue The queue of transactions to run.\n   * @param path The path the queue is for.\n   */\n  private rerunTransactionQueue_(queue: Transaction[], path: Path) {\n    if (queue.length === 0) {\n      return; // Nothing to do!\n    }\n\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events: Event[] = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n      return q.status === TransactionStatus.RUN;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n      return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n      const transaction = queue[i];\n      const relativePath = newRelativePath(path, transaction.path);\n      let abortTransaction = false,\n        abortReason;\n      assert(\n        relativePath !== null,\n        'rerunTransactionsUnderNode_: relativePath should not be null.'\n      );\n\n      if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n        abortTransaction = true;\n        abortReason = transaction.abortReason;\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else if (transaction.status === TransactionStatus.RUN) {\n        if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n          abortTransaction = true;\n          abortReason = 'maxretry';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        } else {\n          // This code reruns a transaction\n          const currentNode = this.getLatestState_(\n            transaction.path,\n            setsToIgnore\n          );\n          transaction.currentInputSnapshot = currentNode;\n          const newData = queue[i].update(currentNode.val());\n          if (newData !== undefined) {\n            validateFirebaseData(\n              'transaction failed: Data returned ',\n              newData,\n              transaction.path\n            );\n            let newDataNode = nodeFromJSON(newData);\n            const hasExplicitPriority =\n              typeof newData === 'object' &&\n              newData != null &&\n              contains(newData, '.priority');\n            if (!hasExplicitPriority) {\n              // Keep the old priority if there wasn't a priority explicitly specified.\n              newDataNode = newDataNode.updatePriority(\n                currentNode.getPriority()\n              );\n            }\n\n            const oldWriteId = transaction.currentWriteId;\n            const serverValues = this.generateServerValues();\n            const newNodeResolved = resolveDeferredValueSnapshot(\n              newDataNode,\n              currentNode,\n              serverValues\n            );\n\n            transaction.currentOutputSnapshotRaw = newDataNode;\n            transaction.currentOutputSnapshotResolved = newNodeResolved;\n            transaction.currentWriteId = this.getNextWriteId_();\n            // Mutates setsToIgnore in place\n            setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n            events = events.concat(\n              this.serverSyncTree_.applyUserOverwrite(\n                transaction.path,\n                newNodeResolved,\n                transaction.currentWriteId,\n                transaction.applyLocally\n              )\n            );\n            events = events.concat(\n              this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n            );\n          } else {\n            abortTransaction = true;\n            abortReason = 'nodata';\n            events = events.concat(\n              this.serverSyncTree_.ackUserWrite(\n                transaction.currentWriteId,\n                true\n              )\n            );\n          }\n        }\n      }\n      eventQueueRaiseEventsForChangedPath(this.eventQueue_, path, events);\n      events = [];\n      if (abortTransaction) {\n        // Abort.\n        queue[i].status = TransactionStatus.COMPLETED;\n\n        // Removing a listener can trigger pruning which can muck with\n        // mergedData/visibleData (as it prunes data). So defer the unwatcher\n        // until we're done.\n        (function (unwatcher) {\n          setTimeout(unwatcher, Math.floor(0));\n        })(queue[i].unwatcher);\n\n        if (queue[i].onComplete) {\n          if (abortReason === 'nodata') {\n            const ref = new Reference(this, queue[i].path);\n            // We set this field immediately, so it's safe to cast to an actual snapshot\n            const lastInput /** @type {!Node} */ =\n              queue[i].currentInputSnapshot;\n            const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, false, snapshot)\n            );\n          } else {\n            callbacks.push(\n              queue[i].onComplete.bind(\n                null,\n                new Error(abortReason),\n                false,\n                null\n              )\n            );\n          }\n        }\n      }\n    }\n\n    // Clean up completed transactions.\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n\n    // Try to send the transaction result to the server.\n    this.sendReadyTransactions_();\n  }\n\n  /**\n   * Returns the rootmost ancestor node of the specified path that has a pending\n   * transaction on it, or just returns the node for the given path if there are\n   * no pending transactions on any ancestor.\n   *\n   * @param path The location to start at.\n   * @return The rootmost node with a transaction.\n   */\n  private getAncestorTransactionNode_(path: Path): Tree<Transaction[]> {\n    let front;\n\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = this.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && transactionNode.getValue() === null) {\n      transactionNode = transactionNode.subTree(front);\n      path = pathPopFront(path);\n      front = pathGetFront(path);\n    }\n\n    return transactionNode;\n  }\n\n  /**\n   * Builds the queue of all transactions at or below the specified\n   * transactionNode.\n   *\n   * @param transactionNode\n   * @return The generated queue.\n   */\n  private buildTransactionQueue_(\n    transactionNode: Tree<Transaction[]>\n  ): Transaction[] {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue: Transaction[] = [];\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => {\n      return a.order - b.order;\n    });\n\n    return transactionQueue;\n  }\n\n  private aggregateTransactionQueuesForNode_(\n    node: Tree<Transaction[]>,\n    queue: Transaction[]\n  ) {\n    const nodeQueue = node.getValue();\n    if (nodeQueue !== null) {\n      for (let i = 0; i < nodeQueue.length; i++) {\n        queue.push(nodeQueue[i]);\n      }\n    }\n\n    node.forEachChild(child => {\n      this.aggregateTransactionQueuesForNode_(child, queue);\n    });\n  }\n\n  /**\n   * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n   */\n  private pruneCompletedTransactionsBelowNode_(node: Tree<Transaction[]>) {\n    const queue = node.getValue();\n    if (queue) {\n      let to = 0;\n      for (let from = 0; from < queue.length; from++) {\n        if (queue[from].status !== TransactionStatus.COMPLETED) {\n          queue[to] = queue[from];\n          to++;\n        }\n      }\n      queue.length = to;\n      node.setValue(queue.length > 0 ? queue : null);\n    }\n\n    node.forEachChild(childNode => {\n      this.pruneCompletedTransactionsBelowNode_(childNode);\n    });\n  }\n\n  /**\n   * Aborts all transactions on ancestors or descendants of the specified path.\n   * Called when doing a set() or update() since we consider them incompatible\n   * with transactions.\n   *\n   * @param path Path for which we want to abort related transactions.\n   */\n  private abortTransactions_(path: Path): Path {\n    const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n    const transactionNode = this.transactionQueueTree_.subTree(path);\n\n    transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n      this.abortTransactionsOnNode_(node);\n    });\n\n    this.abortTransactionsOnNode_(transactionNode);\n\n    transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n      this.abortTransactionsOnNode_(node);\n    });\n\n    return affectedPath;\n  }\n\n  /**\n   * Abort transactions stored in this transaction queue node.\n   *\n   * @param node Node to abort transactions for.\n   */\n  private abortTransactionsOnNode_(node: Tree<Transaction[]>) {\n    const queue = node.getValue();\n    if (queue !== null) {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more transactions\n      // or sets.\n      const callbacks = [];\n\n      // Go through queue.  Any already-sent transactions must be marked for\n      // abort, while the unsent ones can be immediately aborted and removed.\n      let events: Event[] = [];\n      let lastSent = -1;\n      for (let i = 0; i < queue.length; i++) {\n        if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n          // Already marked.  No action needed.\n        } else if (queue[i].status === TransactionStatus.SENT) {\n          assert(\n            lastSent === i - 1,\n            'All SENT items should be at beginning of queue.'\n          );\n          lastSent = i;\n          // Mark transaction for abort when it comes back.\n          queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n          queue[i].abortReason = 'set';\n        } else {\n          assert(\n            queue[i].status === TransactionStatus.RUN,\n            'Unexpected transaction status in abort'\n          );\n          // We can abort it immediately.\n          queue[i].unwatcher();\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n          );\n          if (queue[i].onComplete) {\n            const snapshot: DataSnapshot | null = null;\n            callbacks.push(\n              queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n            );\n          }\n        }\n      }\n      if (lastSent === -1) {\n        // We're not waiting for any sent transactions.  We can clear the queue.\n        node.setValue(null);\n      } else {\n        // Remove the transactions we aborted.\n        queue.length = lastSent + 1;\n      }\n\n      // Now fire the callbacks.\n      eventQueueRaiseEventsForChangedPath(\n        this.eventQueue_,\n        node.path(),\n        events\n      );\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: Query): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk,\n  Deferred\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: Query): Promise<string> {\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query.path.toString(),\n      q: query.queryObject()\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query.getQueryParams()\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: Query): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query.getQueryParams()\n    );\n\n    const pathString = query.path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path, pathGetFront, pathPopFront } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name_ Optional name of the node.\n   * @param parent_ Optional parent node.\n   * @param node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param pathObj Path to look up.\n   * @return Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = pathGetFront(path);\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = pathPopFront(path);\n      next = pathGetFront(path);\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return Whethe rthe tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param action Action to be called for each child.\n   * @param includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param action Action to be called on each parent; return\n   *   true to abort.\n   * @param includeSelf Whether to call action on this node as well.\n   * @return true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param childName The name of the child to update.\n   * @param child The child to update.\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport {\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent\n} from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateBoolean,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Deferred, validateArgCount, validateCallback } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, new QueryParams(), false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (pathIsEmpty(this.path)) {\n      return null;\n    } else {\n      return pathGetBack(this.path);\n    }\n  }\n\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (pathGetFront(this.path) === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, pathChild(this.path, pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = pathParent(this.path);\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      pathChild(this.path, '.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseAppLike } from './RepoManager';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseAppLike,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp as FirebaseAppExp } from '@firebase/app-exp';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\nimport { pathIsEmpty } from './util/Path';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Intersection type that allows the SDK to be used from firebase-exp and\n * firebase v8.\n */\nexport type FirebaseAppLike = FirebaseApp | FirebaseAppExp;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * Update an existing repo in place to point to a new host/port.\n   */\n  applyEmulatorSettings(repo: Repo, host: string, port: number): void {\n    repo.repoInfo_ = new RepoInfo(\n      `${host}:${port}`,\n      /* secure= */ false,\n      repo.repoInfo_.namespace,\n      repo.repoInfo_.webSocketOnly,\n      repo.repoInfo_.nodeAdmin,\n      repo.repoInfo_.persistenceKey,\n      repo.repoInfo_.includeNamespaceInQueryParams\n    );\n\n    if (repo.repoInfo_.nodeAdmin) {\n      repo.authTokenProvider_ = new EmulatorAdminTokenProvider();\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   */\n  databaseFromApp(\n    app: FirebaseAppLike,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.key) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.key];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param repoInfo The metadata about the Repo\n   * @return The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseAppLike,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService {\n  /** Track if the instance has been used (root or repo accessed) */\n  private instanceStarted_: boolean = false;\n\n  /** Backing state for root_ */\n  private rootInternal_?: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(private repoInternal_: Repo) {\n    if (!(repoInternal_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n  }\n\n  INTERNAL = {\n    delete: async () => {\n      this.checkDeleted_('delete');\n      RepoManager.getInstance().deleteRepo(this.repo_);\n      this.repoInternal_ = null;\n      this.rootInternal_ = null;\n    }\n  };\n\n  private get repo_(): Repo {\n    if (!this.instanceStarted_) {\n      this.repoInternal_.start();\n      this.instanceStarted_ = true;\n    }\n    return this.repoInternal_;\n  }\n\n  get root_(): Reference {\n    if (!this.rootInternal_) {\n      this.rootInternal_ = new Reference(this.repo_, newEmptyPath());\n    }\n\n    return this.rootInternal_;\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app as FirebaseApp;\n  }\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host the emulator host (ex: localhost)\n   * @param port the emulator port (ex: 8080)\n   */\n  useEmulator(host: string, port: number): void {\n    this.checkDeleted_('useEmulator');\n    if (this.instanceStarted_) {\n      fatal(\n        'Cannot call useEmulator() after instance has already been initialized.'\n      );\n      return;\n    }\n\n    // Modify the repo to apply emulator settings\n    RepoManager.getInstance().applyEmulatorSettings(\n      this.repoInternal_,\n      host,\n      port\n    );\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @return Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (\n      !this.repo_.repoInfo_.isCustomHost() &&\n      repoInfo.host !== this.repo_.repoInfo_.host\n    ) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          this.repo_.repoInfo_.host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  private checkDeleted_(apiName: string) {\n    if (this.repoInternal_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\nimport { RepoManager } from '../core/RepoManager';\nimport { setSDKVersion } from '../core/version';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport * as types from '@firebase/database-types';\nimport {\n  Provider,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app A valid FirebaseApp-like object\n * @param url A valid Firebase databaseURL\n * @param version custom version e.g. firebase-admin version\n * @param customAuthImpl custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: RepoManager.getInstance().databaseFromApp(\n      app,\n      authProvider,\n      url,\n      nodeAdmin\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}